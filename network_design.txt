Network
status	各プレイヤーの状態	日付.status,PlayerID,役職,生存,プレイヤー名 ALL
talk	発話	日付,talk,talk_id,話者ID,発話内容   ALL
vote	追放投票	日付,vote,投票者ID,投票先ID   ALL
divine	占い先指定	日付,divine,占い師のID,占い対象ID,結果  D only
guard	護衛先指定	日付,guard,ボディーガードID,護衛対象ID,護衛対象の役職   G only

map
[role], {role: role_id}

broadcast to [15, 15] (each row for each agent)
ID [1] {0, 14}
- Killed [1] {0, 1} (optional, killed on each day, contained in alive)
Alive [15] {0, 1}

Comeout [15] {0, 14}
Vote [15, 15] {0,1} (take first if second vote happen (how to detect))

truth
Divine [15] {0, 14} (specific)
Guard [15] {0, 1} (specific) - guarded
Werewolf [15] {0, 1} (specific)
Medium [15] {0, 1} (specific)

Talk:
Estimate [15, 15] {0, 14} (attitude)
Divined [15, 15] {-1, 0, 1} (attitude)
IDENTIFIED (attitude)
+ guarded
Declare [15, 15] {0, 1} (attitude)

Attitude [15, 15] {-1, 0, 1} (agree/disagree) (attacked, )

output [15] [15*15] [[0.1, 0, 0, ..., 0.7], [0.2, ..., 0.6], ...]

-----------------------------------------------

ROLE

VILLAGER
BODYGUARD
POSSESSED

SEER
MEDIUM
WEREWOLF
-------------------------------------

FEATURE 

KNOWN: known role indicator; werewolf*3; 1~15;
ALIVE: Dead or alive; 1, 0;
VOTE: first vote result on previous day; 1, 0;
SKILL: Human or not; -1, 0, 1;
-------- TALK ---------
CO: 1~15
EST: 1~15;
ATT: -1, 0, 1;
IDF: -1, 0, 1;
talk: source (co), target, role, attitude
estimate and attitude
any
assume subjects are all dismissed
medium get result

estimate：X believes that Y’s role is Z. (EstimateContentBuilder)
comingout：X declares that Y’s role is Z.(ComingoutContentBuilder)
divination：X divines Y. (DivinationContentBuilder)
divined：X divined Y, and the result was Z (Human or Wolf)(DivinedResultContentBuilder)
identified：X used the medium power, and identified Y as Z (Human or Wolf)(IdentContentBuilder)
guard：X protects Y. (GuardCandidateContentBuilder)
guarded：X protected Y. (GuardedAgentContentBuilder)
vote：X votes for Y. (VoteContentBuilder)
// voted ：X voted for Y. (VotedContentBuilder)
// attack：X votes for Y to be attacked.（AttackContentBuilder）
// attacked ：X attacked Y. (AttackedContentBuilder)
agree：X agrees with broadcast T. (AgreeContentBuilder)
disagree：X disagrees with broadcast T. (DisagreeContentBuilder)
request：X requests Y to do Z (RequestContentBuilder)
// inquire：X inquires Y about Z (InquiryContentBuilder)
because：X states sentence Z because of reason Y (BecauseContentBuilder)
and：X states A and B and ... (AndContentBuilder)
or：X states at least one of A or B or ... ( OrContentBuilder)
xor：X states either A or B (XorContentBuilder)
not：X negates Y (NotContentBuilder)
// day：X states that Y happened on day T (DayContentBuilder)


TODO:
3. Feature engineering. (Exception log.)
4. More data. 5 + 15; 
7. java code
1. (Training for each role.)
6. accuracy measurement
2. Auxiliary task weight
5. Model architecture.

add even not call



shuffle (dateset shuffle, role shuffle, id)
decoupling
Normalization
LSTM (decading loss?)
per day
per word
per sentence

one-hot encode
sparse input


execute	追放結果	日付,execute,追放者ID,追放者役職
attack	襲撃結果	日付,attack,襲撃先ID,襲撃の成否
result	ゲームの結果	日付,result,村人生存数,人狼生存数,勝利陣営
whisper	ささやき	日付,whisper,whisper_id,話者ID,ささやき内容 
attackVote	襲撃先投票	日付,attackVote,投票者ID,襲撃先ID